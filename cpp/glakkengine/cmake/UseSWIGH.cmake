macro(kke_swig_gen_header
name
files
outputdir)

	set(output "${outputdir}/swiglua_${name}.hpp")
	file(WRITE ${output} "/*\n\tAutomatically generated by UseSWIGH.cmake\n*/\n\n")
	file(APPEND ${output} "#ifndef KKE_SWIG_${name}\n")
	file(APPEND ${output} "#define KKE_SWIG_${name}\n\n")

	file(APPEND ${output} "extern \"C\"\n{\n")

	foreach(i ${files})
		set(iface)
		# Read file
		file(READ ${i} iface)
		# Convert to list
		string(REGEX REPLACE " " "\n" ifacel ${iface})
		string(REGEX REPLACE "\n" ";" ifacen ${ifacel})
		set(iwords "${ifacen}")
		set(ifacel)
		set(ifacen)

		set(nextWord "FALSE")
		foreach(word ${iwords})
			if (nextWord)
				file(APPEND ${output} "\tint luaopen_${word}(lua_State* L);\n")
				list(APPEND funcs ${word})
				set(nextWord "FALSE")
			endif()
			if (${word} MATCHES "%module")
				set(nextWord "TRUE")
			endif()
		endforeach()
		
	endforeach()

	file(APPEND ${output} "\n\tint luaopen_All_${name}(lua_State* L)\n\t{")
	file(APPEND ${output} "\n\t\tint result = 0;\n")

	foreach(func ${funcs})
		file(APPEND ${output} "\n\t\tresult += luaopen_${func}(L);")
	endforeach()
	set(funcs)
	file(APPEND ${output} "\n\n\t\treturn result;\n\t}\n")

	file(APPEND ${output} "}\n")
	file(APPEND ${output} "\n#endif // KKE_SWIG_${name}\n")

	endmacro()

macro(kke_swig_create_module
name
interface
libs
output)

	set_source_files_properties(${${interface}} PROPERTIES CPLUSPLUS ON)
	set_source_files_properties(${${interface}} PROPERTIES CMAKE_SWIG_FLAGS "-includeall -Wall")
	swig_add_module("${name}" "lua" "${${interface}}")
	swig_link_libraries("${name}" "${${libs}}")
	kke_swig_gen_header("${name}" "${${interface}}" "${output}")

	set(kke_swig_${name}_LIBRARY "${LIBRARY_OUTPUT_PATH}/${CMAKE_SHARED_LIBRARY_PREFIX}${name}${CMAKE_SHARED_LIBRARY_SUFFIX}")
endmacro()

macro(
kke_swig_create_module_list
name
interface
libs
output
list)

	kke_swig_create_module(${name} ${interface} ${libs} ${output})
	list(APPEND ${list} ${kke_swig_${name}_LIBRARY})

endmacro()