$#include "Lua/LuaManager.hpp"

namespace kke
{
	class LuaManager
	{
	public:
		static LuaManager& Instance();
		static void Terminate();
		
	public:
		void StackOutput() const;
		
		/**
		 * @brief Add lua listener.
		 *
		 * @param ref Lua registry reference.
		 * @param type Event.
		 * @return bool
		 **/
		bool AddLuaListener(int ref, const kke::EventType& type);
		
		/**
		 * @brief Remove lua listener.
		 *
		 * @param ref Lua registry reference.
		 * @param type Event.
		 * @return bool
		 **/
		bool DelLuaListener(int ref, const kke::EventType& type);
		
		/**
		 * @brief Remove lua listener from all events.
		 *
		 * @param ref Lua registry reference.
		 * @return bool
		 **/
		bool DelLuaListener(int ref);
		
		/**
		 * @brief Return registered reference.
		 *
		 * @param func Function name.
		 * @return int Returns LUA_NOREF if not found.
		 **/
		int GetReference(const std::string& func) const;
		
		/**
		 * @brief Register reference.
		 *
		 * @param func Function name.
		 * @return int Returns reference.
		 **/
		int RegisterReference(const std::string& func);
		
		/**
		 * @brief Unregisters reference.
		 *
		 * @param func Function name.
		 * @return void
		 **/
		void UnregisterReference(const std::string& func);
	};
}